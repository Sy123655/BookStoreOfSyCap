{"ast":null,"code":"import Axios from 'axios';\nimport { CART_ADD_ITEM, CART_ADD_ITEM_FAIL, CART_REMOVE_ITEM, CART_SAVE_PAYMENT_METHOD, CART_SAVE_SHIPPING_ADDRESS } from \"../constants/cartConstants\";\nexport const addToCart = (productId, qty) => async (dispatch, getState) => {\n  const {\n    data\n  } = await Axios.get(`/api/products/${productId}`);\n  const {\n    cart: {\n      cartItems\n    }\n  } = getState();\n\n  if (cartItems.length > 0 && data.seller._id !== cartItems[0].seller._id) {\n    dispatch({\n      type: CART_ADD_ITEM_FAIL,\n      payload: `Can't Add To Cart. Buy only from ${cartItems[0].seller.seller.name} in this order`\n    });\n  } else {\n    dispatch({\n      type: CART_ADD_ITEM,\n      payload: {\n        name: data.name,\n        image: data.image,\n        price: data.price,\n        countInStock: data.countInStock,\n        product: data._id,\n        seller: data.seller,\n        qty\n      }\n    });\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n  }\n};\nexport const removeFromCart = productId => (dispatch, getState) => {\n  dispatch({\n    type: CART_REMOVE_ITEM,\n    payload: productId\n  });\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\nexport const saveShippingAddress = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_SHIPPING_ADDRESS,\n    payload: data\n  });\n  localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\nexport const savePaymentMethod = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_PAYMENT_METHOD,\n    payload: data\n  });\n};","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/BookStore-app-main/frontend/src/actions/cartActions.js"],"names":["Axios","CART_ADD_ITEM","CART_ADD_ITEM_FAIL","CART_REMOVE_ITEM","CART_SAVE_PAYMENT_METHOD","CART_SAVE_SHIPPING_ADDRESS","addToCart","productId","qty","dispatch","getState","data","get","cart","cartItems","length","seller","_id","type","payload","name","image","price","countInStock","product","localStorage","setItem","JSON","stringify","removeFromCart","saveShippingAddress","savePaymentMethod"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,gBAA5C,EAA8DC,wBAA9D,EAAwFC,0BAAxF,QAA0H,4BAA1H;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,SAAD,EAAYC,GAAZ,KAAoB,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AACtE,QAAM;AAACC,IAAAA;AAAD,MAAS,MAAMX,KAAK,CAACY,GAAN,CAAW,iBAAgBL,SAAU,EAArC,CAArB;AACA,QAAM;AACFM,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AADJ,MAEAJ,QAAQ,EAFd;;AAGE,MAAII,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBJ,IAAI,CAACK,MAAL,CAAYC,GAAZ,KAAoBH,SAAS,CAAC,CAAD,CAAT,CAAaE,MAAb,CAAoBC,GAApE,EAAyE;AACvER,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEhB,kBADC;AAEPiB,MAAAA,OAAO,EAAG,oCAAmCL,SAAS,CAAC,CAAD,CAAT,CAAaE,MAAb,CAAoBA,MAApB,CAA2BI,IAAK;AAFtE,KAAD,CAAR;AAID,GALD,MAKO;AACLX,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEjB,aADC;AAEPkB,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAET,IAAI,CAACS,IADJ;AAEPC,QAAAA,KAAK,EAAEV,IAAI,CAACU,KAFL;AAGPC,QAAAA,KAAK,EAAEX,IAAI,CAACW,KAHL;AAIPC,QAAAA,YAAY,EAAEZ,IAAI,CAACY,YAJZ;AAKPC,QAAAA,OAAO,EAAEb,IAAI,CAACM,GALP;AAMPD,QAAAA,MAAM,EAAEL,IAAI,CAACK,MANN;AAOPR,QAAAA;AAPO;AAFF,KAAD,CAAR;AAYAiB,IAAAA,YAAY,CAACC,OAAb,CACE,WADF,EAEEC,IAAI,CAACC,SAAL,CAAelB,QAAQ,GAAGG,IAAX,CAAgBC,SAA/B,CAFF;AAID;AACN,CA5BM;AA8BP,OAAO,MAAMe,cAAc,GAAItB,SAAD,IAAe,CAACE,QAAD,EAAWC,QAAX,KAAwB;AACjED,EAAAA,QAAQ,CAAC;AAACS,IAAAA,IAAI,EAAEf,gBAAP;AAAyBgB,IAAAA,OAAO,EAAEZ;AAAlC,GAAD,CAAR;AACAkB,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAelB,QAAQ,GAAGG,IAAX,CAAgBC,SAA/B,CAAlC;AACH,CAHM;AAKP,OAAO,MAAMgB,mBAAmB,GAAInB,IAAD,IAAWF,QAAD,IAAc;AACvDA,EAAAA,QAAQ,CAAC;AAACS,IAAAA,IAAI,EAAEb,0BAAP;AAAmCc,IAAAA,OAAO,EAAER;AAA5C,GAAD,CAAR;AACAc,EAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAejB,IAAf,CAAxC;AACH,CAHM;AAKP,OAAO,MAAMoB,iBAAiB,GAAIpB,IAAD,IAAWF,QAAD,IAAa;AACpDA,EAAAA,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAEd,wBAAR;AAAkCe,IAAAA,OAAO,EAAER;AAA3C,GAAD,CAAR;AACH,CAFM","sourcesContent":["import Axios from 'axios';\nimport { CART_ADD_ITEM, CART_ADD_ITEM_FAIL, CART_REMOVE_ITEM, CART_SAVE_PAYMENT_METHOD, CART_SAVE_SHIPPING_ADDRESS } from \"../constants/cartConstants\";\n\nexport const addToCart = (productId, qty) => async(dispatch, getState) => {\n    const {data} = await Axios.get(`/api/products/${productId}`);\n    const {\n        cart: { cartItems },\n      } = getState();\n      if (cartItems.length > 0 && data.seller._id !== cartItems[0].seller._id) {\n        dispatch({\n          type: CART_ADD_ITEM_FAIL,\n          payload: `Can't Add To Cart. Buy only from ${cartItems[0].seller.seller.name} in this order`,\n        });\n      } else {\n        dispatch({\n          type: CART_ADD_ITEM,\n          payload: {\n            name: data.name,\n            image: data.image,\n            price: data.price,\n            countInStock: data.countInStock,\n            product: data._id,\n            seller: data.seller,\n            qty,\n          },\n        });\n        localStorage.setItem(\n          'cartItems',\n          JSON.stringify(getState().cart.cartItems)\n        );\n      }\n};\n\nexport const removeFromCart = (productId) => (dispatch, getState) => {\n    dispatch({type: CART_REMOVE_ITEM, payload: productId});\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\n\nexport const saveShippingAddress = (data) => (dispatch) => {\n    dispatch({type: CART_SAVE_SHIPPING_ADDRESS, payload: data});\n    localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\n\nexport const savePaymentMethod = (data) => (dispatch) =>{\n    dispatch({ type: CART_SAVE_PAYMENT_METHOD, payload: data });\n}"]},"metadata":{},"sourceType":"module"}